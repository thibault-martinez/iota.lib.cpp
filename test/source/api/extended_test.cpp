//
// MIT License
//
// Copyright (c) 2017 Thibault Martinez
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
//

#include <gtest/gtest.h>

#include <iota/api/extended.hpp>
#include <iota/constants.hpp>
#include <iota/errors/illegal_state.hpp>
#include <test/utils/configuration.hpp>
#include <test/utils/expect_exception.hpp>

TEST(Extended, GetBundleTransactionHash) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.getBundle(
      "OLDZZVN9XULLFAJYUOIVMVME99RWQMXUHGVKDISCKXDNBEFRGGNMCVUXSEJGRMWCAIHQVPYCJJELA9999");

  EXPECT_EQ(res.getTransactions().size(), 4UL);

  const auto& trx1 = res.getTransactions()[0];
  EXPECT_EQ(
      trx1.getSignatureFragments(),
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999");
  EXPECT_EQ(trx1.getCurrentIndex(), 0);
  EXPECT_EQ(trx1.getLastIndex(), 3);
  EXPECT_EQ(trx1.getNonce(), "GA999INA9999999999999999999");
  EXPECT_EQ(trx1.getHash(),
            "OLDZZVN9XULLFAJYUOIVMVME99RWQMXUHGVKDISCKXDNBEFRGGNMCVUXSEJGRMWCAIHQVPYCJJELA9999");
  EXPECT_EQ(trx1.getTag(), "SECONDBUYREST99999999999999");
  EXPECT_EQ(trx1.getTimestamp(), 1514236443);
  EXPECT_EQ(trx1.getTrunkTransaction(),
            "XOYIYXSPW9JBACPCDAKUPSBLLMDUHWIUWNF9ELFOUSTZWAOSWKYEGBKKWLELCDGZHFXYPLHAZQY999999");
  EXPECT_EQ(trx1.getBranchTransaction(),
            "QFCS9GYVYNODGFBEVNMD9EN9RVOZRQPDDZTDPYGVCLHXJLKALICWRLPYDLIJTTSUKRUHITDWGAVWZ9999");
  EXPECT_EQ(trx1.getAddress(),
            "UVHTRMDTQXZSZCKDIWUZLAPAUWNRKSJZSZUGGNOUGG9OVNVUW9ZHPWMX9XTMQEICQBIJMQOBSYQWTWMAC");
  EXPECT_EQ(trx1.getValue(), 13278300);
  EXPECT_EQ(trx1.getBundle(),
            "OFMGOKXKIUKHO9ZKRJFADHUHJVXOAFEORITLBHVP9RBQBYHGJXWJUWMKWFWZBUCU9VDKWSNEFFQWEI9X9");
  EXPECT_EQ(trx1.getPersistence(), false);

  //! test with last transaction of bundle
  const auto& trx2 = res.getTransactions()[3];
  EXPECT_EQ(
      trx2.getSignatureFragments(),
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999");
  EXPECT_EQ(trx2.getCurrentIndex(), 3);
  EXPECT_EQ(trx2.getLastIndex(), 3);
  EXPECT_EQ(trx2.getNonce(), "WA999ROA9999999999999999999");
  EXPECT_EQ(trx2.getHash(),
            "WEUFYWFILTIO9VVELPIQNSYY9QGTO9OAGPZXQFRBH9HWGECXIVASOBICAVNQOGQUHLYOMZWQOPYDZ9999");
  EXPECT_EQ(trx2.getTag(), "SECONDBUYREST99999999999999");
  EXPECT_EQ(trx2.getTimestamp(), 1514236445);
  EXPECT_EQ(trx2.getTrunkTransaction(),
            "QFCS9GYVYNODGFBEVNMD9EN9RVOZRQPDDZTDPYGVCLHXJLKALICWRLPYDLIJTTSUKRUHITDWGAVWZ9999");
  EXPECT_EQ(trx2.getBranchTransaction(),
            "PIZOVHWCYACPHUJYRAXESDRNLX9MVMRUCXCJZHXGYAOXZFFEXWFWKSKDVHPWTAFEQNJZZOTFVLXWA9999");
  EXPECT_EQ(trx2.getAddress(),
            "XIPC9YDDY9TVVWEEHCAUTHQYOXRUUNSIQWCQKUZP9OFVBPPWLRNCRUJGEVPNNSKIUSCOQKOBXRJWTCNOC");
  EXPECT_EQ(trx2.getValue(), 21720664);
  EXPECT_EQ(trx2.getBundle(),
            "OFMGOKXKIUKHO9ZKRJFADHUHJVXOAFEORITLBHVP9RBQBYHGJXWJUWMKWFWZBUCU9VDKWSNEFFQWEI9X9");
  EXPECT_EQ(trx2.getPersistence(), false);
}

TEST(Extended, GetBundleTransactionHashNonTail) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(
      api.getBundle(
          "SOVJUIVPGKWKRAYOJHV9JQFGZAUWHXTLNRWXWOVEGABCBAHDFOFKVZVORLHFDBBBCBFDEPXNM9NK99999"),
      IOTA::Errors::IllegalState);
}

TEST(Extended, GetBundleBundleHash) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(
      api.getBundle(
          "OTTLTEEKYQHLMGCKGSKMEELHZXNHU9DHODIIZGTLAO9SKRUBWQAIBVWYLLPZFBHOZAXTT9FECVWQEXBVC"),
      IOTA::Errors::IllegalState);
}

TEST(Extended, GetBundleInvalidTrxHash) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(
      api.getBundle(
          "OTTLTEEKYQHLMGCKGSKMEELHZXNHU9DHODIIZGTLAO9SKRUBWQAIBVWYLLPZFBHOZAXTT9FECVWQE9999"),
      IOTA::Errors::IllegalState);
}

TEST(Extended, GetBundleInvalidHash) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(api.getBundle("salut"), IOTA::Errors::IllegalState);
}

TEST(Extended, TraverseBundleTransactionHash) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.traverseBundle(
      "OLDZZVN9XULLFAJYUOIVMVME99RWQMXUHGVKDISCKXDNBEFRGGNMCVUXSEJGRMWCAIHQVPYCJJELA9999");

  EXPECT_EQ(res.getTransactions().size(), 4UL);

  const auto& trx1 = res.getTransactions()[0];
  EXPECT_EQ(
      trx1.getSignatureFragments(),
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999");
  EXPECT_EQ(trx1.getCurrentIndex(), 0);
  EXPECT_EQ(trx1.getLastIndex(), 3);
  EXPECT_EQ(trx1.getNonce(), "GA999INA9999999999999999999");
  EXPECT_EQ(trx1.getHash(),
            "OLDZZVN9XULLFAJYUOIVMVME99RWQMXUHGVKDISCKXDNBEFRGGNMCVUXSEJGRMWCAIHQVPYCJJELA9999");
  EXPECT_EQ(trx1.getTag(), "SECONDBUYREST99999999999999");
  EXPECT_EQ(trx1.getTimestamp(), 1514236443);
  EXPECT_EQ(trx1.getTrunkTransaction(),
            "XOYIYXSPW9JBACPCDAKUPSBLLMDUHWIUWNF9ELFOUSTZWAOSWKYEGBKKWLELCDGZHFXYPLHAZQY999999");
  EXPECT_EQ(trx1.getBranchTransaction(),
            "QFCS9GYVYNODGFBEVNMD9EN9RVOZRQPDDZTDPYGVCLHXJLKALICWRLPYDLIJTTSUKRUHITDWGAVWZ9999");
  EXPECT_EQ(trx1.getAddress(),
            "UVHTRMDTQXZSZCKDIWUZLAPAUWNRKSJZSZUGGNOUGG9OVNVUW9ZHPWMX9XTMQEICQBIJMQOBSYQWTWMAC");
  EXPECT_EQ(trx1.getValue(), 13278300);
  EXPECT_EQ(trx1.getBundle(),
            "OFMGOKXKIUKHO9ZKRJFADHUHJVXOAFEORITLBHVP9RBQBYHGJXWJUWMKWFWZBUCU9VDKWSNEFFQWEI9X9");
  EXPECT_EQ(trx1.getPersistence(), false);

  //! test with last transaction of bundle
  const auto& trx2 = res.getTransactions()[3];
  EXPECT_EQ(
      trx2.getSignatureFragments(),
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999");
  EXPECT_EQ(trx2.getCurrentIndex(), 3);
  EXPECT_EQ(trx2.getLastIndex(), 3);
  EXPECT_EQ(trx2.getNonce(), "WA999ROA9999999999999999999");
  EXPECT_EQ(trx2.getHash(),
            "WEUFYWFILTIO9VVELPIQNSYY9QGTO9OAGPZXQFRBH9HWGECXIVASOBICAVNQOGQUHLYOMZWQOPYDZ9999");
  EXPECT_EQ(trx2.getTag(), "SECONDBUYREST99999999999999");
  EXPECT_EQ(trx2.getTimestamp(), 1514236445);
  EXPECT_EQ(trx2.getTrunkTransaction(),
            "QFCS9GYVYNODGFBEVNMD9EN9RVOZRQPDDZTDPYGVCLHXJLKALICWRLPYDLIJTTSUKRUHITDWGAVWZ9999");
  EXPECT_EQ(trx2.getBranchTransaction(),
            "PIZOVHWCYACPHUJYRAXESDRNLX9MVMRUCXCJZHXGYAOXZFFEXWFWKSKDVHPWTAFEQNJZZOTFVLXWA9999");
  EXPECT_EQ(trx2.getAddress(),
            "XIPC9YDDY9TVVWEEHCAUTHQYOXRUUNSIQWCQKUZP9OFVBPPWLRNCRUJGEVPNNSKIUSCOQKOBXRJWTCNOC");
  EXPECT_EQ(trx2.getValue(), 21720664);
  EXPECT_EQ(trx2.getBundle(),
            "OFMGOKXKIUKHO9ZKRJFADHUHJVXOAFEORITLBHVP9RBQBYHGJXWJUWMKWFWZBUCU9VDKWSNEFFQWEI9X9");
  EXPECT_EQ(trx2.getPersistence(), false);
}

TEST(Extended, TraverseBundleTransactionHashNonTail) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(
      api.traverseBundle(
          "WEUFYWFILTIO9VVELPIQNSYY9QGTO9OAGPZXQFRBH9HWGECXIVASOBICAVNQOGQUHLYOMZWQOPYDZ9999"),
      IOTA::Errors::IllegalState);
}

TEST(Extended, TraverseBundleBundleHash) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(
      api.traverseBundle(
          "OFMGOKXKIUKHO9ZKRJFADHUHJVXOAFEORITLBHVP9RBQBYHGJXWJUWMKWFWZBUCU9VDKWSNEFFQWEI9X9"),
      IOTA::Errors::IllegalState);
}

TEST(Extended, TraverseBundleInvalidTrxHash) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(
      api.traverseBundle(
          "OTTLTEEKYQHLMGCKGSKMEELHZXNHU9DHODIIZGTLAO9SKRUBWQAIBVWYLLPZFBHOZAXTT9FECVWQE9999"),
      IOTA::Errors::IllegalState);
}

TEST(Extended, TraverseBundleInvalidHash) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(api.traverseBundle("salut"), IOTA::Errors::IllegalState);
}

TEST(Extended, TraverseBundleFullTransactionHash) {
  auto api    = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto bundle = IOTA::Models::Bundle{};
  auto res    = api.traverseBundle(
      "OLDZZVN9XULLFAJYUOIVMVME99RWQMXUHGVKDISCKXDNBEFRGGNMCVUXSEJGRMWCAIHQVPYCJJELA9999", "",
      bundle);

  EXPECT_EQ(res.getTransactions().size(), 4UL);

  const auto& trx1 = res.getTransactions()[0];
  EXPECT_EQ(
      trx1.getSignatureFragments(),
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999");
  EXPECT_EQ(trx1.getCurrentIndex(), 0);
  EXPECT_EQ(trx1.getLastIndex(), 3);
  EXPECT_EQ(trx1.getNonce(), "GA999INA9999999999999999999");
  EXPECT_EQ(trx1.getHash(),
            "OLDZZVN9XULLFAJYUOIVMVME99RWQMXUHGVKDISCKXDNBEFRGGNMCVUXSEJGRMWCAIHQVPYCJJELA9999");
  EXPECT_EQ(trx1.getTag(), "SECONDBUYREST99999999999999");
  EXPECT_EQ(trx1.getTimestamp(), 1514236443);
  EXPECT_EQ(trx1.getTrunkTransaction(),
            "XOYIYXSPW9JBACPCDAKUPSBLLMDUHWIUWNF9ELFOUSTZWAOSWKYEGBKKWLELCDGZHFXYPLHAZQY999999");
  EXPECT_EQ(trx1.getBranchTransaction(),
            "QFCS9GYVYNODGFBEVNMD9EN9RVOZRQPDDZTDPYGVCLHXJLKALICWRLPYDLIJTTSUKRUHITDWGAVWZ9999");
  EXPECT_EQ(trx1.getAddress(),
            "UVHTRMDTQXZSZCKDIWUZLAPAUWNRKSJZSZUGGNOUGG9OVNVUW9ZHPWMX9XTMQEICQBIJMQOBSYQWTWMAC");
  EXPECT_EQ(trx1.getValue(), 13278300);
  EXPECT_EQ(trx1.getBundle(),
            "OFMGOKXKIUKHO9ZKRJFADHUHJVXOAFEORITLBHVP9RBQBYHGJXWJUWMKWFWZBUCU9VDKWSNEFFQWEI9X9");
  EXPECT_EQ(trx1.getPersistence(), false);

  //! test with last transaction of bundle
  const auto& trx2 = res.getTransactions()[3];
  EXPECT_EQ(
      trx2.getSignatureFragments(),
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999");
  EXPECT_EQ(trx2.getCurrentIndex(), 3);
  EXPECT_EQ(trx2.getLastIndex(), 3);
  EXPECT_EQ(trx2.getNonce(), "WA999ROA9999999999999999999");
  EXPECT_EQ(trx2.getHash(),
            "WEUFYWFILTIO9VVELPIQNSYY9QGTO9OAGPZXQFRBH9HWGECXIVASOBICAVNQOGQUHLYOMZWQOPYDZ9999");
  EXPECT_EQ(trx2.getTag(), "SECONDBUYREST99999999999999");
  EXPECT_EQ(trx2.getTimestamp(), 1514236445);
  EXPECT_EQ(trx2.getTrunkTransaction(),
            "QFCS9GYVYNODGFBEVNMD9EN9RVOZRQPDDZTDPYGVCLHXJLKALICWRLPYDLIJTTSUKRUHITDWGAVWZ9999");
  EXPECT_EQ(trx2.getBranchTransaction(),
            "PIZOVHWCYACPHUJYRAXESDRNLX9MVMRUCXCJZHXGYAOXZFFEXWFWKSKDVHPWTAFEQNJZZOTFVLXWA9999");
  EXPECT_EQ(trx2.getAddress(),
            "XIPC9YDDY9TVVWEEHCAUTHQYOXRUUNSIQWCQKUZP9OFVBPPWLRNCRUJGEVPNNSKIUSCOQKOBXRJWTCNOC");
  EXPECT_EQ(trx2.getValue(), 21720664);
  EXPECT_EQ(trx2.getBundle(),
            "OFMGOKXKIUKHO9ZKRJFADHUHJVXOAFEORITLBHVP9RBQBYHGJXWJUWMKWFWZBUCU9VDKWSNEFFQWEI9X9");
  EXPECT_EQ(trx2.getPersistence(), false);
}

TEST(Extended, TraverseBundleFullTransactionHashNonTail) {
  auto api    = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto bundle = IOTA::Models::Bundle{};

  EXPECT_THROW(
      api.traverseBundle(
          "WEUFYWFILTIO9VVELPIQNSYY9QGTO9OAGPZXQFRBH9HWGECXIVASOBICAVNQOGQUHLYOMZWQOPYDZ9999", "",
          bundle),
      IOTA::Errors::IllegalState);
}

TEST(Extended, TraverseBundleFullBundleHash) {
  auto api    = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto bundle = IOTA::Models::Bundle{};

  EXPECT_THROW(
      api.traverseBundle(
          "OFMGOKXKIUKHO9ZKRJFADHUHJVXOAFEORITLBHVP9RBQBYHGJXWJUWMKWFWZBUCU9VDKWSNEFFQWEI9X9", "",
          bundle),
      IOTA::Errors::IllegalState);
}

TEST(Extended, TraverseBundleFullInvalidTrxHash) {
  auto api    = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto bundle = IOTA::Models::Bundle{};

  EXPECT_THROW(
      api.traverseBundle(
          "OTTLTEEKYQHLMGCKGSKMEELHZXNHU9DHODIIZGTLAO9SKRUBWQAIBVWYLLPZFBHOZAXTT9FECVWQE9999", "",
          bundle),
      IOTA::Errors::IllegalState);
}

TEST(Extended, TraverseBundleFullInvalidHash) {
  auto api    = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto bundle = IOTA::Models::Bundle{};

  EXPECT_EXCEPTION(api.traverseBundle("salut", "Invalid hashes input", bundle);
                   , IOTA::Errors::BadRequest, "");
}

TEST(Extended, TraverseBundleFullInvalidBundleHash) {
  auto api    = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto bundle = IOTA::Models::Bundle{};
  auto res    = api.traverseBundle(
      "OLDZZVN9XULLFAJYUOIVMVME99RWQMXUHGVKDISCKXDNBEFRGGNMCVUXSEJGRMWCAIHQVPYCJJELA9999", "yolo",
      bundle);

  EXPECT_EQ(res.getTransactions().size(), 0UL);
}

TEST(Extended, TraverseBundleFullIntermediateTrxWithAppending) {
  auto api    = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto bundle = IOTA::Models::Bundle{ { IOTA::Models::Transaction{ "address", 42, "tag", 21 } } };
  auto res    = api.traverseBundle(
      "WEUFYWFILTIO9VVELPIQNSYY9QGTO9OAGPZXQFRBH9HWGECXIVASOBICAVNQOGQUHLYOMZWQOPYDZ9999",
      "OFMGOKXKIUKHO9ZKRJFADHUHJVXOAFEORITLBHVP9RBQBYHGJXWJUWMKWFWZBUCU9VDKWSNEFFQWEI9X9", bundle);

  EXPECT_EQ(res.getTransactions().size(), 2UL);

  const auto& trx1 = res.getTransactions()[0];
  EXPECT_EQ(trx1.getAddress(), "address");
  EXPECT_EQ(trx1.getValue(), 42);
  EXPECT_EQ(trx1.getTag(), "tag");
  EXPECT_EQ(trx1.getTimestamp(), 21);

  const auto& trx2 = res.getTransactions()[1];
  EXPECT_EQ(
      trx2.getSignatureFragments(),
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999");
  EXPECT_EQ(trx2.getCurrentIndex(), 3);
  EXPECT_EQ(trx2.getLastIndex(), 3);
  EXPECT_EQ(trx2.getNonce(), "WA999ROA9999999999999999999");
  EXPECT_EQ(trx2.getHash(),
            "WEUFYWFILTIO9VVELPIQNSYY9QGTO9OAGPZXQFRBH9HWGECXIVASOBICAVNQOGQUHLYOMZWQOPYDZ9999");
  EXPECT_EQ(trx2.getTag(), "SECONDBUYREST99999999999999");
  EXPECT_EQ(trx2.getTimestamp(), 1514236445);
  EXPECT_EQ(trx2.getTrunkTransaction(),
            "QFCS9GYVYNODGFBEVNMD9EN9RVOZRQPDDZTDPYGVCLHXJLKALICWRLPYDLIJTTSUKRUHITDWGAVWZ9999");
  EXPECT_EQ(trx2.getBranchTransaction(),
            "PIZOVHWCYACPHUJYRAXESDRNLX9MVMRUCXCJZHXGYAOXZFFEXWFWKSKDVHPWTAFEQNJZZOTFVLXWA9999");
  EXPECT_EQ(trx2.getAddress(),
            "XIPC9YDDY9TVVWEEHCAUTHQYOXRUUNSIQWCQKUZP9OFVBPPWLRNCRUJGEVPNNSKIUSCOQKOBXRJWTCNOC");
  EXPECT_EQ(trx2.getValue(), 21720664);
  EXPECT_EQ(trx2.getBundle(),
            "OFMGOKXKIUKHO9ZKRJFADHUHJVXOAFEORITLBHVP9RBQBYHGJXWJUWMKWFWZBUCU9VDKWSNEFFQWEI9X9");
  EXPECT_EQ(trx2.getPersistence(), false);
}

TEST(Extended, FindTransactionObjectsByBundle) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.findTransactionObjectsByBundle(
      { "OFMGOKXKIUKHO9ZKRJFADHUHJVXOAFEORITLBHVP9RBQBYHGJXWJUWMKWFWZBUCU9VDKWSNEFFQWEI9X9" });

  EXPECT_EQ(res.size(), 4UL);

  const auto& trx1 = res[0];
  EXPECT_EQ(
      trx1.getSignatureFragments(),
      "OUFWPTQVFXPMQVPQPUZ9NHDJAWXZQJEPUHUXLHWBBDGSVIUIJBZOGMWNFCYSPTPCHWOFCJFDMZGNUCSZCYPXMLAFCYHZ"
      "9UDCBSPMBMLT9KISXRGHBTRNYFFMZPSNKFRKDKKPO9IOEGYNPOZMTMTTPRMUNYOQEVMK99VTPSKJLPEOSJZ9ARQSVMVA"
      "YAZUSHSDHBVWLIHQFZHS9H9UJRYPNOYFNKVBXBLDVW9HMFXWZMDRVMKLYVWLWQNHBQEIHNUGUMPZRARRFTZLQMQEVMWW"
      "J9HZQAVAGBQQIUYQEYJLCEXRKTGJMAOJODQFQBIKBWBKEVEWXJKZOBSCMKZWMWMHQBXZK9IZKYRKVTKPCDDDMPAZARJI"
      "PBZGNWKXFFGKGSAIRKHILHJY9RHWDFNTFQHRC9VTOR9ZJRROSWUDKQVSGGAUGGZCTGESVQ99DFTRTALXXSRNJQ9SZZMX"
      "BY9NZNZCU9NOHZFIP9NFXDPZLCXTNWVILPUSELJGOCLIFZMLACJNCKBUJKFMBFIZPDXXOQCLLSPJGVRI99UOTCMVWZVX"
      "D9EAYSMVLDKHODDRVBHNLFIZNCVVRRAE9NKPROUADWZLIZFLTXSCCACPGRMMOOTFQWLWSHJCIIBGYDGDU9FY9YKTUACO"
      "9VP9TAONPLPUBNANFMVCAJOCM9YFNXAYDWF9AKDHVVGVINCBIGHANJGIFZXGXVPGODQRWIGXCQZQUNQCFSYGZ9TG99BM"
      "W9FHYJOHCRJYNWYKPJUZWXNQKVHKYFSURYLYRZQMMGEOHGGSXEILUEQAZEAHELNOOKM9VNPVLZQIUKJFQFDWYCTNLYXW"
      "ZFJKRXIPSLITYMLCPSOIYJQNWELCHEBXAEVFCDSOGFQTGBFVONCJZMYEAGTEQVYBQAW99ANDK9OWUYTCWZDYUJPKZMLN"
      "AOCCINCRIHARUNHQWWZTAATIPELTZTQNOBRASLNFVXKNGTICPENCYJDEUTQXKGDJJGIOREYBJSDG9EICDKUXFC9KLQCC"
      "PBQISM9NMDHPHGLTAQ9BQXJDEZJZOCBIROKBZCY9CVW9WQP9AQV99OBSSECLOTY9XZHSKZVXEO9NKQAEBCUXRUUVPEHE"
      "9NPJZLZHUNVJQGFSFXQQQQLYOR9YPDAFCUNDSQAZZLRBESMDWAZQDUNOXWHKKAROPRBYARSVRUMBXUGKBFASWBFOOYOG"
      "HKVIJVVSZKJPJROGQZCZOCQNHOBQZ99H9GS9ZEMPUSUWNMXLUJCPCPLNAO9HYCHHLZPHJRFKIPJRIROZGXXWLFNNKKJK"
      "WTVROMADXDSSKYICLPBYTYIKKXALMGZHCBBJZNFDKKZYAC9UFMSFCXXTXJC9EIKVAAHBZAINYOIZHDKBTPKMW9J99TTF"
      "DHMQHMICSLVEBOSTIYXN9FBOWFMWWRXLFJ9KYOUSKTYBWJCUHXZZYKVQZ9A9WGZ9LEJAZQIGGMYYLYNDIHZQ9DWALIUF"
      "NQBPKCHPNVQWASEEGWTPGMRFP9CGIMBAMRPDTBMGEFE9EEKVMTXTZJLWAQVDVMZTUWCNWUNZLLHIJYYWFYEO9OPMT9JN"
      "GNJVSCLGO9YWVFW9UIMDYSQKKZQORIIPVCQWKUFKWHYVFTUIQBJPBZJWZCPTIXIXHOLKLSKVIBPOLCYSITVHCSTHLXDI"
      "GKTCOGQKDIAJSPWNNXQGWTFFXZP9DPZUIKPZJHPFNRTPWQUWCZLAQIBHEJEIZCNYLGWZEBROQOGLVA9PLOLIKZBBFUQE"
      "OXMISFGLRHHADPPQHSAALMARBFKXVJL9GBAUNWVLQDMFNINHRVFZPYZCFNRZYVTZVQHIVAS9YGORD9SUZYCAL9ZSAMEJ"
      "FHEBGWOJBTLMJMRJDQQIGWXX9BLBHAVAULKWOLDLSZAAFSBVOPZWBXDFP9SXVXUYOEDYWCBANCYPIYNMNGPPW9PXMBVP"
      "RCWUYR9FVXFZWPCCHZITAOSVCMMFZIQWQOSAWXVRHULDAOGMSFYI9QTTHJUKNOKDPSCBAFOZ9SXZRDNMRFLGYZYBOHJN"
      "ZSXCRXVCEJCCGXAYCIRTQENBWXUIFJYPKMSKZESMBSJDVTCCVLWGJFQRQVVPMMWGQPRGL9IRKIRNJ9RDVXVLCMQJGBEP"
      "QHQIRCWOCPOBYPPWSHB9XC9LSWIEEQM9KPNYKMMULUADJP9NZIAL9CLYCRAMBPCEHBZKAE9");
  EXPECT_EQ(trx1.getCurrentIndex(), 1);
  EXPECT_EQ(trx1.getLastIndex(), 3);
  EXPECT_EQ(trx1.getNonce(), "AZ999RC99999999999999999999");
  EXPECT_EQ(trx1.getHash(),
            "XOYIYXSPW9JBACPCDAKUPSBLLMDUHWIUWNF9ELFOUSTZWAOSWKYEGBKKWLELCDGZHFXYPLHAZQY999999");
  EXPECT_EQ(trx1.getTag(), "SECONDBUYREST99999999999999");
  EXPECT_EQ(trx1.getTimestamp(), 1514236443);
  EXPECT_EQ(trx1.getTrunkTransaction(),
            "UPJLLTZBKATRTT9N9N9AFXDSLPRSORT9QKGXCWMCWYKBRQVUGFVPUNNAYWJDLENUBBCCKXYFTSRCZ9999");
  EXPECT_EQ(trx1.getBranchTransaction(),
            "QFCS9GYVYNODGFBEVNMD9EN9RVOZRQPDDZTDPYGVCLHXJLKALICWRLPYDLIJTTSUKRUHITDWGAVWZ9999");
  EXPECT_EQ(trx1.getAddress(),
            "ALYIMIMXGFVLHFHJVUGKGSSZASSVK9CYBL9FFHY9OMA9UWMDECIREQOMGNFNGYGZOVTDBZEI9BR9WJTLD");
  EXPECT_EQ(trx1.getValue(), -34998964);
  EXPECT_EQ(trx1.getBundle(),
            "OFMGOKXKIUKHO9ZKRJFADHUHJVXOAFEORITLBHVP9RBQBYHGJXWJUWMKWFWZBUCU9VDKWSNEFFQWEI9X9");
  EXPECT_EQ(trx1.getPersistence(), false);

  //! test with last transaction of bundle
  const auto& trx2 = res[3];
  EXPECT_EQ(
      trx2.getSignatureFragments(),
      "Z9DCHFNBIJIVQUGXLBUGYKKDSATHSINGLOPCCZSPRPHRZVYSTMTRFRRHOHPCGFRL9ZOSMRPKLXIR9UZSZCFPVOZDOINP"
      "KCVRBBAWHGSSHVURIALQCCTCJRSQRIPTTNLLS9TTMNYTGAWNVGUFWUZBEAYFDUBYSLYWB9PNJJVVPRNDTSMDBQXSGUIA"
      "HLCOUPG9IVXAQMCMRHOU9BMUIPMGUFTXPUXBKR99VWULJTBNW9PJVHKPPACRYAKWLAFPCYHAGELZXAYYYMFQQWBJOKSE"
      "HEEVUKOUUAYYPRFRTQVWIODVOGMJKGCITJITLVCEO9YVHVCBZYEMAUVVPAREKZG9EEGGIGINAQMTUKMGLGF9OQLNSKWZ"
      "BHMIMXJEMSSMEPBECPVBYXXYREESXDCAPXASBV9ZOTEHPYIPELRNTWD9CLKWXKJZEUKEFSFFECANXCLTGGINEXCNBGSY"
      "OYPAVEKURLPCPLBEUBPJOBAXSXXABPPWTUUHAMSOEMHOJMOTOLDDSFXZXM9QMDCQATDPWOPYLPJLLPBZBNYAXKXDHTTW"
      "MCLENXNPWGKWNYXBX9TU9MHQYNY9FJLWADUIBFLXIS9QSHDSQOIIGVLRPGHCLKGNWRIXRPDUKMXMCDZKYLSOXAMFQDQG"
      "9A9XASBIKHZTDYMAMLORRFYYHKPRMKJNDDPJKTZTOK9FQSNNLFYK9HPWO9OWKSWSWYRUKFXTLLEV9YNSVCMCXVWSHMKC"
      "WGQ9IXTPEBMPXDGKVIDJTPNRTPDJQFBCMYOMDGKCAHGNQYZRHZPZTNZAJZNZWVHPYLFXVGIGNYISFVIYCBCTNVMPZLWF"
      "GBKXWEIFNKIDORBRZGTPMAQVCQIJLPJHL9EMKBMAPEXFCWIBSKGNSQFOSUXEGHD9DOVACWEHRGWPJEFSZATUKGDPLHIS"
      "9BWLRABHLAOIJ9XRSAERJQKFEG9CCNCYRNNICAGCWC9VTGHPZHBBCQZSJCCQXILWQWCRJKWFHPWQJGNDNKFSLKLPMEAU"
      "BILYKKLHIMIRENKHCNTMSKHSTZBSMIWODLHKWGPIXXEWS9QAFNVEVTLFZITGKXBNDXPYPZMBETYK9WZESSIPAQDUAYNT"
      "HIADMENJSAXKROIJZIANUMRJHV9FJBQSCOFPJCJCOYBJLDZQHHXS9ORIFWYVOSYIMUGTDJLMOCECQV9DTXSAAVQNVUPP"
      "NBKFTLMVRVWBSHCCTRYVBUOIXXVCGCRKZRTCIXF9LFZBTBSFWJERCXAU9DDUCTWTF9GQICHDQZUTBQBWOCTBDMJXESIU"
      "CPEFRGMWIYGTQYPFRNMWDQTFDFBYRHPPRBJPXNZQYWSJWNPCRORTUKQWRGNW9MJLDYNAFMQGTPGULKSIOOEDCVQDWAWM"
      "RCGAXZVQJYS9AJFTYQHNOGQGCSLVIFLNNUUUFKZBDNOLCIQQSCRIGNG9HRNKSF9EKHKVTMTWQ9WHFALRLCJYMTNOSVSF"
      "9ZYMYOGXF9JNQRCJNOIXC9JBMMHBBDJDXB9ZOUBSFLOKFKFMXVPFLOW9VY9NKUEBJJDIYMUDNEBCOWXGRNBBIGHJJSZZ"
      "SYXJNJR9CPXGMWHAASDTZGERUXFPIHRZGDILFPATWIWYP9SKIZNPXUR9FJFLWMWZDNGAOZSERFBWCUMKAOQKFXOOUWFU"
      "LDKWJPGGRERJVYJYOYCPWN9SVPTIYK9CNCDAUWQQZRSBWMKIUPGINMJSPOJQTJOLYUEYFAFTWYUZPWVUTQYFMDKRLMNK"
      "DUXAEGKEPP9EMMFRBSYZIYZCBFSJDRLDCWLIVGIXFFHJVL9ACXXLPJETJALMPNMCGOPIROEPPUJCRQNZPUII9CPJJ9Y9"
      "BRMSGCIDRSSS9LLKMVMHJMCUYJRYTWBWEAHU9BLCEFPXBNENYGUXM9NPZIYYJQMVXSPBQDZSXYBYSVIJPFABJAF99YGK"
      "GKUSZPXLNQMWQDOENDLLTXVUOZAANVCAAOWFVHJFSYSKZWMPNHSNLGMFXEHPESFKSTVPGLWFTZYFYUBPPSCLHQHFLG9V"
      "ZMUAZDFSMJLDKHRNYZMWIYEMOLKCKCTQZYHMTQZQYTQFRXGWFUDLTJXFW9JBXWSFSVVGQYXSHKZYTATKCYMGEZWIWTEL"
      "KBKNHVLTLJTIU9ZYDFKDRK9WWERCK9MKPVOGULAMYKFV9UURBCSFYK9LHSNQSVYLUJBFZQW");
  EXPECT_EQ(trx2.getCurrentIndex(), 2);
  EXPECT_EQ(trx2.getLastIndex(), 3);
  EXPECT_EQ(trx2.getNonce(), "MA9999E99999999999999999999");
  EXPECT_EQ(trx2.getHash(),
            "UPJLLTZBKATRTT9N9N9AFXDSLPRSORT9QKGXCWMCWYKBRQVUGFVPUNNAYWJDLENUBBCCKXYFTSRCZ9999");
  EXPECT_EQ(trx2.getTag(), "SECONDBUYREST99999999999999");
  EXPECT_EQ(trx2.getTimestamp(), 1514236443);
  EXPECT_EQ(trx2.getTrunkTransaction(),
            "WEUFYWFILTIO9VVELPIQNSYY9QGTO9OAGPZXQFRBH9HWGECXIVASOBICAVNQOGQUHLYOMZWQOPYDZ9999");
  EXPECT_EQ(trx2.getBranchTransaction(),
            "QFCS9GYVYNODGFBEVNMD9EN9RVOZRQPDDZTDPYGVCLHXJLKALICWRLPYDLIJTTSUKRUHITDWGAVWZ9999");
  EXPECT_EQ(trx2.getAddress(),
            "ALYIMIMXGFVLHFHJVUGKGSSZASSVK9CYBL9FFHY9OMA9UWMDECIREQOMGNFNGYGZOVTDBZEI9BR9WJTLD");
  EXPECT_EQ(trx2.getValue(), 0);
  EXPECT_EQ(trx2.getBundle(),
            "OFMGOKXKIUKHO9ZKRJFADHUHJVXOAFEORITLBHVP9RBQBYHGJXWJUWMKWFWZBUCU9VDKWSNEFFQWEI9X9");
  EXPECT_EQ(trx2.getPersistence(), false);
}

TEST(Extended, FindTransactionObjectsByBundleInvalidTrxHash) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.findTransactionObjectsByBundle(
      { "SOVJUIVPGKWKRAYOJHV9JQFGZAUWHXTLNRWXWOVEGABCBAHDFOFKVZVORLHFDBBBCBFDEPXNM9NK99999" });

  EXPECT_EQ(res.size(), 0UL);
}

TEST(Extended, FindTransactionObjectsByBundleInvalidHash) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(api.findTransactionObjectsByBundle({ "salut" }), IOTA::Errors::IllegalState);
}

TEST(Extended, FindTailTransactionHash) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.findTailTransactionHash(
      { "WEUFYWFILTIO9VVELPIQNSYY9QGTO9OAGPZXQFRBH9HWGECXIVASOBICAVNQOGQUHLYOMZWQOPYDZ9999" });

  EXPECT_EQ(res,
            "OLDZZVN9XULLFAJYUOIVMVME99RWQMXUHGVKDISCKXDNBEFRGGNMCVUXSEJGRMWCAIHQVPYCJJELA9999");
}

TEST(Extended, FindTailTransactionHashWithTailTrx) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.findTailTransactionHash(
      { "OLDZZVN9XULLFAJYUOIVMVME99RWQMXUHGVKDISCKXDNBEFRGGNMCVUXSEJGRMWCAIHQVPYCJJELA9999" });

  EXPECT_EQ(res,
            "OLDZZVN9XULLFAJYUOIVMVME99RWQMXUHGVKDISCKXDNBEFRGGNMCVUXSEJGRMWCAIHQVPYCJJELA9999");
}

TEST(Extended, FindTailTransactionHashWithBundle) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.findTailTransactionHash(
      "OFMGOKXKIUKHO9ZKRJFADHUHJVXOAFEORITLBHVP9RBQBYHGJXWJUWMKWFWZBUCU9VDKWSNEFFQWEI9X9");

  EXPECT_EQ(res, IOTA::EmptyHash);
}

TEST(Extended, FindTailTransactionHashWithInvalid) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_EXCEPTION(api.findTailTransactionHash("salut");
                   , IOTA::Errors::BadRequest, "Invalid hashes input");
}

TEST(Extended, FindTransactionsByAddresses) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.findTransactionsByAddresses(
      { "XIPC9YDDY9TVVWEEHCAUTHQYOXRUUNSIQWCQKUZP9OFVBPPWLRNCRUJGEVPNNSKIUSCOQKOBXRJWTCNOC" });

  EXPECT_FALSE(res.getHashes().empty());
}

TEST(Extended, FindTransactionsByAddressesInvalidAddress) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  IOTA::API::Responses::FindTransactions res;

  EXPECT_EXCEPTION(res = api.findTransactionsByAddresses({ "9999" });
                   , IOTA::Errors::BadRequest, "Invalid addresses input")

  EXPECT_GE(res.getDuration(), 0);
}

TEST(Extended, FindTransactionsByTags) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.findTransactionsByTags({ "SECONDBUYREST99999999999999" });

  EXPECT_FALSE(res.getHashes().empty());
}

TEST(Extended, FindTransactionsByApprovees) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.findTransactionsByApprovees(
      { "OLDZZVN9XULLFAJYUOIVMVME99RWQMXUHGVKDISCKXDNBEFRGGNMCVUXSEJGRMWCAIHQVPYCJJELA9999" });

  EXPECT_FALSE(res.getHashes().empty());
}

TEST(Extended, FindTransactionsByApproveesInvalidApprovee) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  IOTA::API::Responses::FindTransactions res;

  EXPECT_EXCEPTION(res = api.findTransactionsByApprovees({ "9999" });
                   , IOTA::Errors::BadRequest, "Invalid approvees input")

  EXPECT_GE(res.getDuration(), 0);
}

TEST(Extended, FindTransactionsByBundles) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.findTransactionsByBundles(
      { "OFMGOKXKIUKHO9ZKRJFADHUHJVXOAFEORITLBHVP9RBQBYHGJXWJUWMKWFWZBUCU9VDKWSNEFFQWEI9X9" });

  EXPECT_FALSE(res.getHashes().empty());
}

TEST(Extended, FindTransactionsByBundlesInvalidBundle) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  IOTA::API::Responses::FindTransactions res;

  EXPECT_EXCEPTION(res = api.findTransactionsByBundles({ "9999" });
                   , IOTA::Errors::BadRequest, "Invalid bundles input")

  EXPECT_GE(res.getDuration(), 0);
}

TEST(Extended, GetAccountData) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.getAccountData(
      "IHDEENZYITYVYSPKAURUZAQKGVJEREFDJMYTANNXXGPZ9GJWTEOJJ9IPMXOGZNQLSNMFDSQOTZAEETUEA", 0, 2,
      true, 0, true, 0, 0, true, 0);

  EXPECT_EQ(res.getAddresses(),
            std::vector<IOTA::Types::Trytes>({ "GIZCVPBCVUWSUPCRNVQKYNCGMUMOGHPDPHDPPQDX9GFFTOTSKWP"
                                               "NGMUEDEPFNBPKUZJTWKE9IOPGLGCSDFSLNTBDWY" }));

  EXPECT_EQ(res.getTransfers(), std::vector<IOTA::Models::Bundle>({}));
  EXPECT_EQ(res.getBalance(), 0);
}

TEST(Extended, GetAccountDataInvalidSeed) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(api.getAccountData("hello", 0, 2, true, 0, true, 0, 0, true, 0),
               IOTA::Errors::IllegalState);
}

TEST(Extended, GetAccountDataInvalidSecurity) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(
      api.getAccountData(
          "NMONSFDSHMERABGGDPKRGDJ9WUBUZEDLUTWVPZGJRJFPNWACSGEXGRGCVOR9JFJGPBMWYBPCFSCRXQXZT", 0,
          42, true, 0, true, 0, 0, true, 0),
      IOTA::Errors::IllegalState);
}

TEST(Extended, GetAccountDataWithoutChechsum) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.getAccountData(
      "NMONSFDSHMERABGGDPKRGDJ9WUBUZEDLUTWVPZGJRJFPNWACSGEXGRGCVOR9JFJGPBMWYBPCFSCRXQXZT", 0, 2,
      false, 0, true, 0, 0, true, 0);

  EXPECT_EQ(
      res.getAddresses(),
      std::vector<IOTA::Types::Trytes>(
          { "GIZCVPBCVUWSUPCRNVQKYNCGMUMOGHPDPHDPPQDX9GFFTOTSKWPNGMUEDEPFNBPKUZJTWKE9IOPGLGCSD" }));

  EXPECT_EQ(res.getTransfers(), std::vector<IOTA::Models::Bundle>({}));
  EXPECT_EQ(res.getBalance(), 0);
}

TEST(Extended, GetAccountDataTotal) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.getAccountData(
      "NMONSFDSHMERABGGDPKRGDJ9WUBUZEDLUTWVPZGJRJFPNWACSGEXGRGCVOR9JFJGPBMWYBPCFSCRXQXZT", 0, 2,
      true, 1, true, 0, 0, true, 0);

  EXPECT_EQ(res.getAddresses(),
            std::vector<IOTA::Types::Trytes>({ "GIZCVPBCVUWSUPCRNVQKYNCGMUMOGHPDPHDPPQDX9GFFTOTSKWP"
                                               "NGMUEDEPFNBPKUZJTWKE9IOPGLGCSDFSLNTBDWY" }));

  EXPECT_EQ(res.getTransfers(), std::vector<IOTA::Models::Bundle>({}));
  EXPECT_EQ(res.getBalance(), 0);
}

TEST(Extended, GetAccountDataReturnAll) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.getAccountData(
      "NMONSFDSHMERABGGDPKRGDJ9WUBUZEDLUTWVPZGJRJFPNWACSGEXGRGCVOR9JFJGPBMWYBPCFSCRXQXZT", 0, 2,
      true, 0, false, 0, 0, true, 0);

  EXPECT_EQ(res.getAddresses(),
            std::vector<IOTA::Types::Trytes>({ "GIZCVPBCVUWSUPCRNVQKYNCGMUMOGHPDPHDPPQDX9GFFTOTSKWP"
                                               "NGMUEDEPFNBPKUZJTWKE9IOPGLGCSDFSLNTBDWY" }));

  EXPECT_EQ(res.getTransfers(), std::vector<IOTA::Models::Bundle>({}));
  EXPECT_EQ(res.getBalance(), 0);
}

TEST(Extended, GetAccountDataStartEnd) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.getAccountData(
      "NMONSFDSHMERABGGDPKRGDJ9WUBUZEDLUTWVPZGJRJFPNWACSGEXGRGCVOR9JFJGPBMWYBPCFSCRXQXZT", 0, 2,
      true, 0, true, 1, 1, true, 0);

  EXPECT_EQ(res.getAddresses(),
            std::vector<IOTA::Types::Trytes>({ "GIZCVPBCVUWSUPCRNVQKYNCGMUMOGHPDPHDPPQDX9GFFTOTSKWP"
                                               "NGMUEDEPFNBPKUZJTWKE9IOPGLGCSDFSLNTBDWY" }));

  EXPECT_EQ(res.getTransfers(), std::vector<IOTA::Models::Bundle>({}));
  EXPECT_EQ(res.getBalance(), 0);
}

TEST(Extended, GetAccountDataMin) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(
      api.getAccountData(
          "NMONSFDSHMERABGGDPKRGDJ9WUBUZEDLUTWVPZGJRJFPNWACSGEXGRGCVOR9JFJGPBMWYBPCFSCRXQXZT", 0, 2,
          true, 0, true, 0, 0, true, 1000),
      IOTA::Errors::IllegalState);
}

TEST(Extended, GetBalancesAndFormat) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.getBalancesAndFormat({ "FFUIAREGAAAHNTPJRGRFCNCNOTKTKPWJEGUDWQHZVVO9MTAXZIDMXBMWJX"
                                        "TLUBHNFNKYCCTQUXOUYFKX99MUZJEPYD",
                                        "FFUIAREGAAAHNTPJRGRFCNCNOTKTKPWJEGUDWQHZVVO9MTAXZIDMXBMWJX"
                                        "TLUBHNFNKYCCTQUXOUYFKX99MUZJEPYD" },
                                      0, 0, 2);

  EXPECT_EQ(res.getTotalBalance(), 617650144175136);
  EXPECT_EQ(res.getInput().size(), 2UL);

  const auto& input_1 = res.getInput()[0];
  EXPECT_EQ(
      input_1.getAddress(),
      "FFUIAREGAAAHNTPJRGRFCNCNOTKTKPWJEGUDWQHZVVO9MTAXZIDMXBMWJXTLUBHNFNKYCCTQUXOUYFKX99MUZJEPYD");
  EXPECT_EQ(input_1.getBalance(), 308825072087568);
  EXPECT_EQ(input_1.getKeyIndex(), 0);
  EXPECT_EQ(input_1.getSecurity(), 2);

  const auto& input_2 = res.getInput()[1];
  EXPECT_EQ(
      input_2.getAddress(),
      "FFUIAREGAAAHNTPJRGRFCNCNOTKTKPWJEGUDWQHZVVO9MTAXZIDMXBMWJXTLUBHNFNKYCCTQUXOUYFKX99MUZJEPYD");
  EXPECT_EQ(input_2.getBalance(), 308825072087568);
  EXPECT_EQ(input_2.getKeyIndex(), 1);
  EXPECT_EQ(input_2.getSecurity(), 2);
}

TEST(Extended, GetBalancesAndFormatInvalidSecurity) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(
      api.getBalancesAndFormat({ "FFUIAREGAAAHNTPJRGRFCNCNOTKTKPWJEGUDWQHZVVO9MTAXZIDMXBMWJX"
                                 "TLUBHNFNKYCCTQUXOUYFKX99MUZJEPYD",
                                 "FFUIAREGAAAHNTPJRGRFCNCNOTKTKPWJEGUDWQHZVVO9MTAXZIDMXBMWJX"
                                 "TLUBHNFNKYCCTQUXOUYFKX99MUZJEPYD" },
                               0, 0, 0),
      IOTA::Errors::IllegalState);
}

TEST(Extended, GetBalancesAndFormatInvalidBalance) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(
      api.getBalancesAndFormat({ "FFUIAREGAAAHNTPJRGRFCNCNOTKTKPWJEGUDWQHZVVO9MTAXZIDMXBMWJX"
                                 "TLUBHNFNKYCCTQUXOUYFKX99MUZJEPYD",
                                 "FFUIAREGAAAHNTPJRGRFCNCNOTKTKPWJEGUDWQHZVVO9MTAXZIDMXBMWJX"
                                 "TLUBHNFNKYCCTQUXOUYFKX99MUZJEPYD" },
                               717650144175136, 0, 2),
      IOTA::Errors::IllegalState);
}

TEST(Extended, GetBalancesAndFormatStart) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.getBalancesAndFormat({ "FFUIAREGAAAHNTPJRGRFCNCNOTKTKPWJEGUDWQHZVVO9MTAXZIDMXBMWJX"
                                        "TLUBHNFNKYCCTQUXOUYFKX99MUZJEPYD",
                                        "FFUIAREGAAAHNTPJRGRFCNCNOTKTKPWJEGUDWQHZVVO9MTAXZIDMXBMWJX"
                                        "TLUBHNFNKYCCTQUXOUYFKX99MUZJEPYD" },
                                      0, 10, 2);

  EXPECT_EQ(res.getTotalBalance(), 617650144175136);
  EXPECT_EQ(res.getInput().size(), 2UL);

  const auto& input_1 = res.getInput()[0];
  EXPECT_EQ(
      input_1.getAddress(),
      "FFUIAREGAAAHNTPJRGRFCNCNOTKTKPWJEGUDWQHZVVO9MTAXZIDMXBMWJXTLUBHNFNKYCCTQUXOUYFKX99MUZJEPYD");
  EXPECT_EQ(input_1.getBalance(), 308825072087568);
  EXPECT_EQ(input_1.getKeyIndex(), 10);
  EXPECT_EQ(input_1.getSecurity(), 2);

  const auto& input_2 = res.getInput()[1];
  EXPECT_EQ(
      input_2.getAddress(),
      "FFUIAREGAAAHNTPJRGRFCNCNOTKTKPWJEGUDWQHZVVO9MTAXZIDMXBMWJXTLUBHNFNKYCCTQUXOUYFKX99MUZJEPYD");
  EXPECT_EQ(input_2.getBalance(), 308825072087568);
  EXPECT_EQ(input_2.getKeyIndex(), 11);
  EXPECT_EQ(input_2.getSecurity(), 2);
}
