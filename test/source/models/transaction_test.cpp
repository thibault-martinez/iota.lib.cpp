//
// MIT License
//
// Copyright (c) 2017-2018 Thibault Martinez and Simon Ninon
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
//

#include <gtest/gtest.h>

#include <iota/models/transaction.hpp>

TEST(Transaction, DefaultCtor) {
  IOTA::Models::Transaction t;

  EXPECT_EQ(t.getSignatureFragments(), "");
  EXPECT_EQ(t.getCurrentIndex(), 0);
  EXPECT_EQ(t.getLastIndex(), 0);
  EXPECT_EQ(t.getNonce(), "");
  EXPECT_EQ(t.getHash(), "");
  EXPECT_EQ(t.getTag(), "");
  EXPECT_EQ(t.getObsoleteTag(), "");
  EXPECT_EQ(t.getTimestamp(), 0);
  EXPECT_EQ(t.getAttachmentTimestamp(), 0);
  EXPECT_EQ(t.getAttachmentTimestampLowerBound(), 0);
  EXPECT_EQ(t.getAttachmentTimestampUpperBound(), 0);
  EXPECT_EQ(t.getTrunkTransaction(), "");
  EXPECT_EQ(t.getBranchTransaction(), "");
  EXPECT_EQ(t.getAddress(), "");
  EXPECT_EQ(t.getValue(), 0);
  EXPECT_EQ(t.getBundle(), "");
  EXPECT_EQ(t.getPersistence(), false);
}

TEST(Transaction, CtorFromTrxTrytesAndToTrytes) {
  IOTA::Models::Transaction t(
      "Z9DCHFNBIJIVQUGXLBUGYKKDSATHSINGLOPCCZSPRPHRZVYSTMTRFRRHOHPCGFRL9ZOSMRPKLXIR9UZSZCFPVOZDOINP"
      "KCVRBBAWHGSSHVURIALQCCTCJRSQRIPTTNLLS9TTMNYTGAWNVGUFWUZBEAYFDUBYSLYWB9PNJJVVPRNDTSMDBQXSGUIA"
      "HLCOUPG9IVXAQMCMRHOU9BMUIPMGUFTXPUXBKR99VWULJTBNW9PJVHKPPACRYAKWLAFPCYHAGELZXAYYYMFQQWBJOKSE"
      "HEEVUKOUUAYYPRFRTQVWIODVOGMJKGCITJITLVCEO9YVHVCBZYEMAUVVPAREKZG9EEGGIGINAQMTUKMGLGF9OQLNSKWZ"
      "BHMIMXJEMSSMEPBECPVBYXXYREESXDCAPXASBV9ZOTEHPYIPELRNTWD9CLKWXKJZEUKEFSFFECANXCLTGGINEXCNBGSY"
      "OYPAVEKURLPCPLBEUBPJOBAXSXXABPPWTUUHAMSOEMHOJMOTOLDDSFXZXM9QMDCQATDPWOPYLPJLLPBZBNYAXKXDHTTW"
      "MCLENXNPWGKWNYXBX9TU9MHQYNY9FJLWADUIBFLXIS9QSHDSQOIIGVLRPGHCLKGNWRIXRPDUKMXMCDZKYLSOXAMFQDQG"
      "9A9XASBIKHZTDYMAMLORRFYYHKPRMKJNDDPJKTZTOK9FQSNNLFYK9HPWO9OWKSWSWYRUKFXTLLEV9YNSVCMCXVWSHMKC"
      "WGQ9IXTPEBMPXDGKVIDJTPNRTPDJQFBCMYOMDGKCAHGNQYZRHZPZTNZAJZNZWVHPYLFXVGIGNYISFVIYCBCTNVMPZLWF"
      "GBKXWEIFNKIDORBRZGTPMAQVCQIJLPJHL9EMKBMAPEXFCWIBSKGNSQFOSUXEGHD9DOVACWEHRGWPJEFSZATUKGDPLHIS"
      "9BWLRABHLAOIJ9XRSAERJQKFEG9CCNCYRNNICAGCWC9VTGHPZHBBCQZSJCCQXILWQWCRJKWFHPWQJGNDNKFSLKLPMEAU"
      "BILYKKLHIMIRENKHCNTMSKHSTZBSMIWODLHKWGPIXXEWS9QAFNVEVTLFZITGKXBNDXPYPZMBETYK9WZESSIPAQDUAYNT"
      "HIADMENJSAXKROIJZIANUMRJHV9FJBQSCOFPJCJCOYBJLDZQHHXS9ORIFWYVOSYIMUGTDJLMOCECQV9DTXSAAVQNVUPP"
      "NBKFTLMVRVWBSHCCTRYVBUOIXXVCGCRKZRTCIXF9LFZBTBSFWJERCXAU9DDUCTWTF9GQICHDQZUTBQBWOCTBDMJXESIU"
      "CPEFRGMWIYGTQYPFRNMWDQTFDFBYRHPPRBJPXNZQYWSJWNPCRORTUKQWRGNW9MJLDYNAFMQGTPGULKSIOOEDCVQDWAWM"
      "RCGAXZVQJYS9AJFTYQHNOGQGCSLVIFLNNUUUFKZBDNOLCIQQSCRIGNG9HRNKSF9EKHKVTMTWQ9WHFALRLCJYMTNOSVSF"
      "9ZYMYOGXF9JNQRCJNOIXC9JBMMHBBDJDXB9ZOUBSFLOKFKFMXVPFLOW9VY9NKUEBJJDIYMUDNEBCOWXGRNBBIGHJJSZZ"
      "SYXJNJR9CPXGMWHAASDTZGERUXFPIHRZGDILFPATWIWYP9SKIZNPXUR9FJFLWMWZDNGAOZSERFBWCUMKAOQKFXOOUWFU"
      "LDKWJPGGRERJVYJYOYCPWN9SVPTIYK9CNCDAUWQQZRSBWMKIUPGINMJSPOJQTJOLYUEYFAFTWYUZPWVUTQYFMDKRLMNK"
      "DUXAEGKEPP9EMMFRBSYZIYZCBFSJDRLDCWLIVGIXFFHJVL9ACXXLPJETJALMPNMCGOPIROEPPUJCRQNZPUII9CPJJ9Y9"
      "BRMSGCIDRSSS9LLKMVMHJMCUYJRYTWBWEAHU9BLCEFPXBNENYGUXM9NPZIYYJQMVXSPBQDZSXYBYSVIJPFABJAF99YGK"
      "GKUSZPXLNQMWQDOENDLLTXVUOZAANVCAAOWFVHJFSYSKZWMPNHSNLGMFXEHPESFKSTVPGLWFTZYFYUBPPSCLHQHFLG9V"
      "ZMUAZDFSMJLDKHRNYZMWIYEMOLKCKCTQZYHMTQZQYTQFRXGWFUDLTJXFW9JBXWSFSVVGQYXSHKZYTATKCYMGEZWIWTEL"
      "KBKNHVLTLJTIU9ZYDFKDRK9WWERCK9MKPVOGULAMYKFV9UURBCSFYK9LHSNQSVYLUJBFZQWALYIMIMXGFVLHFHJVUGKG"
      "SSZASSVK9CYBL9FFHY9OMA9UWMDECIREQOMGNFNGYGZOVTDBZEI9BR9WJTLD999999999999999999999999999SECON"
      "DBUYREST99999999999999FXEHNYD99B99999999C99999999OFMGOKXKIUKHO9ZKRJFADHUHJVXOAFEORITLBHVP9RB"
      "QBYHGJXWJUWMKWFWZBUCU9VDKWSNEFFQWEI9X9WEUFYWFILTIO9VVELPIQNSYY9QGTO9OAGPZXQFRBH9HWGECXIVASOB"
      "ICAVNQOGQUHLYOMZWQOPYDZ9999QFCS9GYVYNODGFBEVNMD9EN9RVOZRQPDDZTDPYGVCLHXJLKALICWRLPYDLIJTTSUK"
      "RUHITDWGAVWZ9999SECONDBUYREST99999999999999VEDATNUJE999999999MMMMMMMMMMA9999E999999999999999"
      "99999");

  EXPECT_EQ(
      t.getSignatureFragments(),
      "Z9DCHFNBIJIVQUGXLBUGYKKDSATHSINGLOPCCZSPRPHRZVYSTMTRFRRHOHPCGFRL9ZOSMRPKLXIR9UZSZCFPVOZDOINP"
      "KCVRBBAWHGSSHVURIALQCCTCJRSQRIPTTNLLS9TTMNYTGAWNVGUFWUZBEAYFDUBYSLYWB9PNJJVVPRNDTSMDBQXSGUIA"
      "HLCOUPG9IVXAQMCMRHOU9BMUIPMGUFTXPUXBKR99VWULJTBNW9PJVHKPPACRYAKWLAFPCYHAGELZXAYYYMFQQWBJOKSE"
      "HEEVUKOUUAYYPRFRTQVWIODVOGMJKGCITJITLVCEO9YVHVCBZYEMAUVVPAREKZG9EEGGIGINAQMTUKMGLGF9OQLNSKWZ"
      "BHMIMXJEMSSMEPBECPVBYXXYREESXDCAPXASBV9ZOTEHPYIPELRNTWD9CLKWXKJZEUKEFSFFECANXCLTGGINEXCNBGSY"
      "OYPAVEKURLPCPLBEUBPJOBAXSXXABPPWTUUHAMSOEMHOJMOTOLDDSFXZXM9QMDCQATDPWOPYLPJLLPBZBNYAXKXDHTTW"
      "MCLENXNPWGKWNYXBX9TU9MHQYNY9FJLWADUIBFLXIS9QSHDSQOIIGVLRPGHCLKGNWRIXRPDUKMXMCDZKYLSOXAMFQDQG"
      "9A9XASBIKHZTDYMAMLORRFYYHKPRMKJNDDPJKTZTOK9FQSNNLFYK9HPWO9OWKSWSWYRUKFXTLLEV9YNSVCMCXVWSHMKC"
      "WGQ9IXTPEBMPXDGKVIDJTPNRTPDJQFBCMYOMDGKCAHGNQYZRHZPZTNZAJZNZWVHPYLFXVGIGNYISFVIYCBCTNVMPZLWF"
      "GBKXWEIFNKIDORBRZGTPMAQVCQIJLPJHL9EMKBMAPEXFCWIBSKGNSQFOSUXEGHD9DOVACWEHRGWPJEFSZATUKGDPLHIS"
      "9BWLRABHLAOIJ9XRSAERJQKFEG9CCNCYRNNICAGCWC9VTGHPZHBBCQZSJCCQXILWQWCRJKWFHPWQJGNDNKFSLKLPMEAU"
      "BILYKKLHIMIRENKHCNTMSKHSTZBSMIWODLHKWGPIXXEWS9QAFNVEVTLFZITGKXBNDXPYPZMBETYK9WZESSIPAQDUAYNT"
      "HIADMENJSAXKROIJZIANUMRJHV9FJBQSCOFPJCJCOYBJLDZQHHXS9ORIFWYVOSYIMUGTDJLMOCECQV9DTXSAAVQNVUPP"
      "NBKFTLMVRVWBSHCCTRYVBUOIXXVCGCRKZRTCIXF9LFZBTBSFWJERCXAU9DDUCTWTF9GQICHDQZUTBQBWOCTBDMJXESIU"
      "CPEFRGMWIYGTQYPFRNMWDQTFDFBYRHPPRBJPXNZQYWSJWNPCRORTUKQWRGNW9MJLDYNAFMQGTPGULKSIOOEDCVQDWAWM"
      "RCGAXZVQJYS9AJFTYQHNOGQGCSLVIFLNNUUUFKZBDNOLCIQQSCRIGNG9HRNKSF9EKHKVTMTWQ9WHFALRLCJYMTNOSVSF"
      "9ZYMYOGXF9JNQRCJNOIXC9JBMMHBBDJDXB9ZOUBSFLOKFKFMXVPFLOW9VY9NKUEBJJDIYMUDNEBCOWXGRNBBIGHJJSZZ"
      "SYXJNJR9CPXGMWHAASDTZGERUXFPIHRZGDILFPATWIWYP9SKIZNPXUR9FJFLWMWZDNGAOZSERFBWCUMKAOQKFXOOUWFU"
      "LDKWJPGGRERJVYJYOYCPWN9SVPTIYK9CNCDAUWQQZRSBWMKIUPGINMJSPOJQTJOLYUEYFAFTWYUZPWVUTQYFMDKRLMNK"
      "DUXAEGKEPP9EMMFRBSYZIYZCBFSJDRLDCWLIVGIXFFHJVL9ACXXLPJETJALMPNMCGOPIROEPPUJCRQNZPUII9CPJJ9Y9"
      "BRMSGCIDRSSS9LLKMVMHJMCUYJRYTWBWEAHU9BLCEFPXBNENYGUXM9NPZIYYJQMVXSPBQDZSXYBYSVIJPFABJAF99YGK"
      "GKUSZPXLNQMWQDOENDLLTXVUOZAANVCAAOWFVHJFSYSKZWMPNHSNLGMFXEHPESFKSTVPGLWFTZYFYUBPPSCLHQHFLG9V"
      "ZMUAZDFSMJLDKHRNYZMWIYEMOLKCKCTQZYHMTQZQYTQFRXGWFUDLTJXFW9JBXWSFSVVGQYXSHKZYTATKCYMGEZWIWTEL"
      "KBKNHVLTLJTIU9ZYDFKDRK9WWERCK9MKPVOGULAMYKFV9UURBCSFYK9LHSNQSVYLUJBFZQW");
  EXPECT_EQ(t.getCurrentIndex(), 2);
  EXPECT_EQ(t.getLastIndex(), 3);
  EXPECT_EQ(t.getNonce(), "MA9999E99999999999999999999");
  EXPECT_EQ(t.getHash(),
            "UPJLLTZBKATRTT9N9N9AFXDSLPRSORT9QKGXCWMCWYKBRQVUGFVPUNNAYWJDLENUBBCCKXYFTSRCZ9999");
  EXPECT_EQ(t.getTag(), "SECONDBUYREST99999999999999");
  EXPECT_EQ(t.getObsoleteTag(), "SECONDBUYREST99999999999999");
  EXPECT_EQ(t.getTimestamp(), 1514236443);
  EXPECT_EQ(t.getAttachmentTimestamp(), 1514236458352);
  EXPECT_EQ(t.getAttachmentTimestampLowerBound(), 0);
  EXPECT_EQ(t.getAttachmentTimestampUpperBound(), 3812798742493);
  EXPECT_EQ(t.getTrunkTransaction(),
            "WEUFYWFILTIO9VVELPIQNSYY9QGTO9OAGPZXQFRBH9HWGECXIVASOBICAVNQOGQUHLYOMZWQOPYDZ9999");
  EXPECT_EQ(t.getBranchTransaction(),
            "QFCS9GYVYNODGFBEVNMD9EN9RVOZRQPDDZTDPYGVCLHXJLKALICWRLPYDLIJTTSUKRUHITDWGAVWZ9999");
  EXPECT_EQ(t.getAddress(),
            "ALYIMIMXGFVLHFHJVUGKGSSZASSVK9CYBL9FFHY9OMA9UWMDECIREQOMGNFNGYGZOVTDBZEI9BR9WJTLD");
  EXPECT_EQ(t.getValue(), 0);
  EXPECT_EQ(t.getBundle(),
            "OFMGOKXKIUKHO9ZKRJFADHUHJVXOAFEORITLBHVP9RBQBYHGJXWJUWMKWFWZBUCU9VDKWSNEFFQWEI9X9");
  EXPECT_EQ(t.getPersistence(), false);

  EXPECT_EQ(
      t.toTrytes(),
      "Z9DCHFNBIJIVQUGXLBUGYKKDSATHSINGLOPCCZSPRPHRZVYSTMTRFRRHOHPCGFRL9ZOSMRPKLXIR9UZSZCFPVOZDOINP"
      "KCVRBBAWHGSSHVURIALQCCTCJRSQRIPTTNLLS9TTMNYTGAWNVGUFWUZBEAYFDUBYSLYWB9PNJJVVPRNDTSMDBQXSGUIA"
      "HLCOUPG9IVXAQMCMRHOU9BMUIPMGUFTXPUXBKR99VWULJTBNW9PJVHKPPACRYAKWLAFPCYHAGELZXAYYYMFQQWBJOKSE"
      "HEEVUKOUUAYYPRFRTQVWIODVOGMJKGCITJITLVCEO9YVHVCBZYEMAUVVPAREKZG9EEGGIGINAQMTUKMGLGF9OQLNSKWZ"
      "BHMIMXJEMSSMEPBECPVBYXXYREESXDCAPXASBV9ZOTEHPYIPELRNTWD9CLKWXKJZEUKEFSFFECANXCLTGGINEXCNBGSY"
      "OYPAVEKURLPCPLBEUBPJOBAXSXXABPPWTUUHAMSOEMHOJMOTOLDDSFXZXM9QMDCQATDPWOPYLPJLLPBZBNYAXKXDHTTW"
      "MCLENXNPWGKWNYXBX9TU9MHQYNY9FJLWADUIBFLXIS9QSHDSQOIIGVLRPGHCLKGNWRIXRPDUKMXMCDZKYLSOXAMFQDQG"
      "9A9XASBIKHZTDYMAMLORRFYYHKPRMKJNDDPJKTZTOK9FQSNNLFYK9HPWO9OWKSWSWYRUKFXTLLEV9YNSVCMCXVWSHMKC"
      "WGQ9IXTPEBMPXDGKVIDJTPNRTPDJQFBCMYOMDGKCAHGNQYZRHZPZTNZAJZNZWVHPYLFXVGIGNYISFVIYCBCTNVMPZLWF"
      "GBKXWEIFNKIDORBRZGTPMAQVCQIJLPJHL9EMKBMAPEXFCWIBSKGNSQFOSUXEGHD9DOVACWEHRGWPJEFSZATUKGDPLHIS"
      "9BWLRABHLAOIJ9XRSAERJQKFEG9CCNCYRNNICAGCWC9VTGHPZHBBCQZSJCCQXILWQWCRJKWFHPWQJGNDNKFSLKLPMEAU"
      "BILYKKLHIMIRENKHCNTMSKHSTZBSMIWODLHKWGPIXXEWS9QAFNVEVTLFZITGKXBNDXPYPZMBETYK9WZESSIPAQDUAYNT"
      "HIADMENJSAXKROIJZIANUMRJHV9FJBQSCOFPJCJCOYBJLDZQHHXS9ORIFWYVOSYIMUGTDJLMOCECQV9DTXSAAVQNVUPP"
      "NBKFTLMVRVWBSHCCTRYVBUOIXXVCGCRKZRTCIXF9LFZBTBSFWJERCXAU9DDUCTWTF9GQICHDQZUTBQBWOCTBDMJXESIU"
      "CPEFRGMWIYGTQYPFRNMWDQTFDFBYRHPPRBJPXNZQYWSJWNPCRORTUKQWRGNW9MJLDYNAFMQGTPGULKSIOOEDCVQDWAWM"
      "RCGAXZVQJYS9AJFTYQHNOGQGCSLVIFLNNUUUFKZBDNOLCIQQSCRIGNG9HRNKSF9EKHKVTMTWQ9WHFALRLCJYMTNOSVSF"
      "9ZYMYOGXF9JNQRCJNOIXC9JBMMHBBDJDXB9ZOUBSFLOKFKFMXVPFLOW9VY9NKUEBJJDIYMUDNEBCOWXGRNBBIGHJJSZZ"
      "SYXJNJR9CPXGMWHAASDTZGERUXFPIHRZGDILFPATWIWYP9SKIZNPXUR9FJFLWMWZDNGAOZSERFBWCUMKAOQKFXOOUWFU"
      "LDKWJPGGRERJVYJYOYCPWN9SVPTIYK9CNCDAUWQQZRSBWMKIUPGINMJSPOJQTJOLYUEYFAFTWYUZPWVUTQYFMDKRLMNK"
      "DUXAEGKEPP9EMMFRBSYZIYZCBFSJDRLDCWLIVGIXFFHJVL9ACXXLPJETJALMPNMCGOPIROEPPUJCRQNZPUII9CPJJ9Y9"
      "BRMSGCIDRSSS9LLKMVMHJMCUYJRYTWBWEAHU9BLCEFPXBNENYGUXM9NPZIYYJQMVXSPBQDZSXYBYSVIJPFABJAF99YGK"
      "GKUSZPXLNQMWQDOENDLLTXVUOZAANVCAAOWFVHJFSYSKZWMPNHSNLGMFXEHPESFKSTVPGLWFTZYFYUBPPSCLHQHFLG9V"
      "ZMUAZDFSMJLDKHRNYZMWIYEMOLKCKCTQZYHMTQZQYTQFRXGWFUDLTJXFW9JBXWSFSVVGQYXSHKZYTATKCYMGEZWIWTEL"
      "KBKNHVLTLJTIU9ZYDFKDRK9WWERCK9MKPVOGULAMYKFV9UURBCSFYK9LHSNQSVYLUJBFZQWALYIMIMXGFVLHFHJVUGKG"
      "SSZASSVK9CYBL9FFHY9OMA9UWMDECIREQOMGNFNGYGZOVTDBZEI9BR9WJTLD999999999999999999999999999SECON"
      "DBUYREST99999999999999FXEHNYD99B99999999C99999999OFMGOKXKIUKHO9ZKRJFADHUHJVXOAFEORITLBHVP9RB"
      "QBYHGJXWJUWMKWFWZBUCU9VDKWSNEFFQWEI9X9WEUFYWFILTIO9VVELPIQNSYY9QGTO9OAGPZXQFRBH9HWGECXIVASOB"
      "ICAVNQOGQUHLYOMZWQOPYDZ9999QFCS9GYVYNODGFBEVNMD9EN9RVOZRQPDDZTDPYGVCLHXJLKALICWRLPYDLIJTTSUK"
      "RUHITDWGAVWZ9999SECONDBUYREST99999999999999VEDATNUJE999999999MMMMMMMMMMA9999E999999999999999"
      "99999");
}

TEST(Transaction, CtorFromTrxTrytesEmptyTrytes) {
  IOTA::Models::Transaction t{ {} };

  EXPECT_EQ(t.getSignatureFragments(), "");
  EXPECT_EQ(t.getCurrentIndex(), 0);
  EXPECT_EQ(t.getLastIndex(), 0);
  EXPECT_EQ(t.getNonce(), "");
  EXPECT_EQ(t.getHash(), "");
  EXPECT_EQ(t.getTag(), "");
  EXPECT_EQ(t.getObsoleteTag(), "");
  EXPECT_EQ(t.getTimestamp(), 0);
  EXPECT_EQ(t.getAttachmentTimestamp(), 0);
  EXPECT_EQ(t.getAttachmentTimestampLowerBound(), 0);
  EXPECT_EQ(t.getAttachmentTimestampUpperBound(), 0);
  EXPECT_EQ(t.getTrunkTransaction(), "");
  EXPECT_EQ(t.getBranchTransaction(), "");
  EXPECT_EQ(t.getAddress(), "");
  EXPECT_EQ(t.getValue(), 0);
  EXPECT_EQ(t.getBundle(), "");
  EXPECT_EQ(t.getPersistence(), false);
  EXPECT_EQ(t.toTrytes(),
            "999999999999999999999999999999999999999999999999999999999999999999999999999999999");
}

TEST(Transaction, CtorFromTrxTrytesInvalidTrytes) {
  IOTA::Models::Transaction t(
      "Z9DCHFNBIJIVQUGXLBUGYKKDSATHSINGLOPCCZSPRPHRZVYSTMTRFRRHOHPCGFRL9ZOSMRPKLXIR9UZSZCFPVOZDOINP"
      "KCVRBBAWHGSSHVURIALQCCTCJRSQRIPTTNLLS9TTMNYTGAWNVGUFWUZBEAYFDUBYSLYWB9PNJJVVPRNDTSMDBQXSGUIA"
      "HLCOUPG9IVXAQMCMRHOU9BMUIPMGUFTXPUXBKR99VWULJTBNW9PJVHKPPACRYAKWLAFPCYHAGELZXAYYYMFQQWBJOKSE"
      "HEEVUKOUUAYYPRFRTQVWIODVOGMJKGCITJITLVCEO9YVHVCBZYEMAUVVPAREKZG9EEGGIGINAQMTUKMGLGF9OQLNSKWZ"
      "BHMIMXJEMSSMEPBECPVBYXXYREESXDCAPXASBV9ZOTEHPYIPELRNTWD9CLKWXKJZEUKEFSFFECANXCLTGGINEXCNBGSY"
      "OYPAVEKURLPCPLBEUBPJOBAXSXXABPPWTUUHAMSOEMHOJMOTOLDDSFXZXM9QMDCQATDPWOPYLPJLLPBZBNYAXKXDHTTW"
      "MCLENXNPWGKWNYXBX9TU9MHQYNY9FJLWADUIBFLXIS9QSHDSQOIIGVLRPGHCLKGNWRIXRPDUKMXMCDZKYLSOXAMFQDQG"
      "9A9XASBIKHZTDYMAMLORRFYYHKPRMKJNDDPJKTZTOK9FQSNNLFYK9HPWO9OWKSWSWYRUKFXTLLEV9YNSVCMCXVWSHMKC"
      "WGQ9IXTPEBMPXDGKVIDJTPNRTPDJQFBCMYOMDGKCAHGNQYZRHZPZTNZAJZNZWVHPYLFXVGIGNYISFVIYCBCTNVMPZLWF"
      "GBKXWEIFNKIDORBRZGTPMAQVCQIJLPJHL9EMKBMAPEXFCWIBSKGNSQFOSUXEGHD9DOVACWEHRGWPJEFSZATUKGDPLHIS"
      "9BWLRABHLAOIJ9XRSAERJQKFEG9CCNCYRNNICAGCWC9VTGHPZHBBCQZSJCCQXILWQWCRJKWFHPWQJGNDNKFSLKLPMEAU"
      "BILYKKLHIMIRENKHCNTMSKHSTZBSMIWODLHKWGPIXXEWS9QAFNVEVTLFZITGKXBNDXPYPZMBETYK9WZESSIPAQDUAYNT"
      "HIADMENJSAXKROIJZIANUMRJHV9FJBQSCOFPJCJCOYBJLDZQHHXS9ORIFWYVOSYIMUGTDJLMOCECQV9DTXSAAVQNVUPP"
      "NBKFTLMVRVWBSHCCTRYVBUOIXXVCGCRKZRTCIXF9LFZBTBSFWJERCXAU9DDUCTWTF9GQICHDQZUTBQBWOCTBDMJXESIU"
      "CPEFRGMWIYGTQYPFRNMWDQTFDFBYRHPPRBJPXNZQYWSJWNPCRORTUKQWRGNW9MJLDYNAFMQGTPGULKSIOOEDCVQDWAWM"
      "RCGAXZVQJYS9AJFTYQHNOGQGCSLVIFLNNUUUFKZBDNOLCIQQSCRIGNG9HRNKSF9EKHKVTMTWQ9WHFALRLCJYMTNOSVSF"
      "9ZYMYOGXF9JNQRCJNOIXC9JBMMHBBDJDXB9ZOUBSFLOKFKFMXVPFLOW9VY9NKUEBJJDIYMUDNEBCOWXGRNBBIGHJJSZZ"
      "SYXJNJR9CPXGMWHAASDTZGERUXFPIHRZGDILFPATWIWYP9SKIZNPXUR9FJFLWMWZDNGAOZSERFBWCUMKAOQKFXOOUWFU"
      "LDKWJPGGRERJVYJYOYCPWN9SVPTIYK9CNCDAUWQQZRSBWMKIUPGINMJSPOJQTJOLYUEYFAFTWYUZPWVUTQYFMDKRLMNK"
      "DUXAEGKEPP9EMMFRBSYZIYZCBFSJDRLDCWLIVGIXFFHJVL9ACXXLPJETJALMPNMCGOPIROEPPUJCRQNZPUII9CPJJ9Y9"
      "BRMSGCIDRSSS9LLKMVMHJMCUYJRYTWBWEAHU9BLCEFPXBNENYGUXM9NPZIYYJQMVXSPBQDZSXYBYSVIJPFABJAF99YGK"
      "GKUSZPXLNQMWQDOENDLLTXVUOZAANVCAAOWFVHJFSYSKZWMPNHSNLGMFXEHPESFKSTVPGLWFTZYFYUBPPSCLHQHFLG9V"
      "ZMUAZDFSMJLDKHRNYZMWIYEMOLKCKCTQZYHMTQZQYTQFRXGWFUDLTJXFW9JBXWSFSVVGQYXSHKZYTATKCYMGEZWIWTEL"
      "KBKNHVLTLJTIU9ZYDFKDRK9WWERCK9MKPVOGULAMYKFV9UURBCSFYK9LHSNQSVYLUJBFZQWALYIMIMXGFVLHFHJVUGKG"
      "SSZASSVK9CYBL9FFHY9OMA9UWMDECIREQOMGNFNGYGZOVTDBZEI9BR9WJTLDAAAAAAAAAAAAAAAAAAAAAAAAAAASECON"
      "DBUYREST99999999999999FXEHNYD99B99999999C99999999OFMGOKXKIUKHO9ZKRJFADHUHJVXOAFEORITLBHVP9RB"
      "QBYHGJXWJUWMKWFWZBUCU9VDKWSNEFFQWEI9X9WEUFYWFILTIO9VVELPIQNSYY9QGTO9OAGPZXQFRBH9HWGECXIVASOB"
      "ICAVNQOGQUHLYOMZWQOPYDZ9999QFCS9GYVYNODGFBEVNMD9EN9RVOZRQPDDZTDPYGVCLHXJLKALICWRLPYDLIJTTSUK"
      "RUHITDWGAVWZ9999SECONDBUYREST99999999999999VEDATNUJE999999999MMMMMMMMMMA9999E999999999999999"
      "99999");

  EXPECT_EQ(t.getSignatureFragments(), "");
  EXPECT_EQ(t.getCurrentIndex(), 0);
  EXPECT_EQ(t.getLastIndex(), 0);
  EXPECT_EQ(t.getNonce(), "");
  EXPECT_EQ(t.getHash(), "");
  EXPECT_EQ(t.getTag(), "");
  EXPECT_EQ(t.getObsoleteTag(), "");
  EXPECT_EQ(t.getTimestamp(), 0);
  EXPECT_EQ(t.getAttachmentTimestamp(), 0);
  EXPECT_EQ(t.getAttachmentTimestampLowerBound(), 0);
  EXPECT_EQ(t.getAttachmentTimestampUpperBound(), 0);
  EXPECT_EQ(t.getTrunkTransaction(), "");
  EXPECT_EQ(t.getBranchTransaction(), "");
  EXPECT_EQ(t.getAddress(), "");
  EXPECT_EQ(t.getValue(), 0);
  EXPECT_EQ(t.getBundle(), "");
  EXPECT_EQ(t.getPersistence(), false);
  EXPECT_EQ(t.toTrytes(),
            "999999999999999999999999999999999999999999999999999999999999999999999999999999999");
}

TEST(Transaction, CtorFull) {
  IOTA::Models::Transaction t("signatureFragments", 1, 2, "nonce", "hash", 3, "trunkTransaction",
                              "branchTransaction", "address", 4, "bundle", "tag", 5, 6, 7);

  EXPECT_EQ(t.getSignatureFragments(), "signatureFragments");
  EXPECT_EQ(t.getCurrentIndex(), 1);
  EXPECT_EQ(t.getLastIndex(), 2);
  EXPECT_EQ(t.getNonce(), "nonce");
  EXPECT_EQ(t.getHash(), "hash");
  EXPECT_EQ(t.getTag(), "tag");
  EXPECT_EQ(t.getObsoleteTag(), "tag");
  EXPECT_EQ(t.getTimestamp(), 3);
  EXPECT_EQ(t.getAttachmentTimestamp(), 5);
  EXPECT_EQ(t.getAttachmentTimestampLowerBound(), 6);
  EXPECT_EQ(t.getAttachmentTimestampUpperBound(), 7);
  EXPECT_EQ(t.getTrunkTransaction(), "trunkTransaction");
  EXPECT_EQ(t.getBranchTransaction(), "branchTransaction");
  EXPECT_EQ(t.getAddress(), "address");
  EXPECT_EQ(t.getValue(), 4);
  EXPECT_EQ(t.getBundle(), "bundle");
  EXPECT_EQ(t.getPersistence(), false);
}

TEST(Transaction, CtorShort) {
  IOTA::Models::Transaction t = { "address", 1, "tag", 2 };

  EXPECT_EQ(t.getSignatureFragments(), "");
  EXPECT_EQ(t.getCurrentIndex(), 0);
  EXPECT_EQ(t.getLastIndex(), 0);
  EXPECT_EQ(t.getNonce(), "");
  EXPECT_EQ(t.getHash(), "");
  EXPECT_EQ(t.getObsoleteTag(), "tag");
  EXPECT_EQ(t.getTag(), "tag");
  EXPECT_EQ(t.getTimestamp(), 2);
  EXPECT_EQ(t.getAttachmentTimestamp(), 0);
  EXPECT_EQ(t.getAttachmentTimestampLowerBound(), 0);
  EXPECT_EQ(t.getAttachmentTimestampUpperBound(), 0);
  EXPECT_EQ(t.getTrunkTransaction(), "");
  EXPECT_EQ(t.getBranchTransaction(), "");
  EXPECT_EQ(t.getAddress(), "address");
  EXPECT_EQ(t.getValue(), 1);
  EXPECT_EQ(t.getBundle(), "");
  EXPECT_EQ(t.getPersistence(), false);
}

TEST(Transaction, CtorShortFull) {
  IOTA::Models::Transaction t = { "address", 1, "tag", 2, 3, 4, 5 };

  EXPECT_EQ(t.getSignatureFragments(), "");
  EXPECT_EQ(t.getCurrentIndex(), 0);
  EXPECT_EQ(t.getLastIndex(), 0);
  EXPECT_EQ(t.getNonce(), "");
  EXPECT_EQ(t.getHash(), "");
  EXPECT_EQ(t.getObsoleteTag(), "tag");
  EXPECT_EQ(t.getTag(), "tag");
  EXPECT_EQ(t.getTimestamp(), 2);
  EXPECT_EQ(t.getAttachmentTimestamp(), 3);
  EXPECT_EQ(t.getAttachmentTimestampLowerBound(), 4);
  EXPECT_EQ(t.getAttachmentTimestampUpperBound(), 5);
  EXPECT_EQ(t.getTrunkTransaction(), "");
  EXPECT_EQ(t.getBranchTransaction(), "");
  EXPECT_EQ(t.getAddress(), "address");
  EXPECT_EQ(t.getValue(), 1);
  EXPECT_EQ(t.getBundle(), "");
  EXPECT_EQ(t.getPersistence(), false);
}

TEST(Transaction, ConstGetters) {
  const IOTA::Models::Transaction t("signatureFragments", 1, 2, "nonce", "hash", 3,
                                    "trunkTransaction", "branchTransaction", "address", 4, "bundle",
                                    "tag", 5, 6, 7);

  EXPECT_EQ(t.getSignatureFragments(), "signatureFragments");
  EXPECT_EQ(t.getCurrentIndex(), 1);
  EXPECT_EQ(t.getLastIndex(), 2);
  EXPECT_EQ(t.getNonce(), "nonce");
  EXPECT_EQ(t.getHash(), "hash");
  EXPECT_EQ(t.getTag(), "tag");
  EXPECT_EQ(t.getObsoleteTag(), "tag");
  EXPECT_EQ(t.getTimestamp(), 3);
  EXPECT_EQ(t.getAttachmentTimestamp(), 5);
  EXPECT_EQ(t.getAttachmentTimestampLowerBound(), 6);
  EXPECT_EQ(t.getAttachmentTimestampUpperBound(), 7);
  EXPECT_EQ(t.getTrunkTransaction(), "trunkTransaction");
  EXPECT_EQ(t.getBranchTransaction(), "branchTransaction");
  EXPECT_EQ(t.getAddress(), "address");
  EXPECT_EQ(t.getValue(), 4);
  EXPECT_EQ(t.getBundle(), "bundle");
  EXPECT_EQ(t.getPersistence(), false);
}

TEST(Transaction, BundleGetterAndSetter) {
  IOTA::Models::Transaction t;
  EXPECT_EQ(t.getBundle(), "");

  t.setBundle("bundle");
  EXPECT_EQ(t.getBundle(), "bundle");
}

TEST(Transaction, BranchTransactionGetterAndSetter) {
  IOTA::Models::Transaction t;
  EXPECT_EQ(t.getBranchTransaction(), "");

  t.setBranchTransaction("trx");
  EXPECT_EQ(t.getBranchTransaction(), "trx");
}

TEST(Transaction, TrunkTransactionGetterAndSetter) {
  IOTA::Models::Transaction t;
  EXPECT_EQ(t.getTrunkTransaction(), "");

  t.setTrunkTransaction("trx");
  EXPECT_EQ(t.getTrunkTransaction(), "trx");
}

TEST(Transaction, TimestampGetterAndSetter) {
  IOTA::Models::Transaction t;
  EXPECT_EQ(t.getTimestamp(), 0);

  t.setTimestamp(1);
  EXPECT_EQ(t.getTimestamp(), 1);
}

TEST(Transaction, AttachmentTimestampGetterAndSetter) {
  IOTA::Models::Transaction t;
  EXPECT_EQ(t.getAttachmentTimestamp(), 0);

  t.setAttachmentTimestamp(1);
  EXPECT_EQ(t.getAttachmentTimestamp(), 1);
}

TEST(Transaction, AttachmentTimestampLowerBoundGetterAndSetter) {
  IOTA::Models::Transaction t;
  EXPECT_EQ(t.getAttachmentTimestampLowerBound(), 0);

  t.setAttachmentTimestampLowerBound(1);
  EXPECT_EQ(t.getAttachmentTimestampLowerBound(), 1);
}

TEST(Transaction, AttachmentTimestampUpperBoundGetterAndSetter) {
  IOTA::Models::Transaction t;
  EXPECT_EQ(t.getAttachmentTimestampUpperBound(), 0);

  t.setAttachmentTimestampUpperBound(1);
  EXPECT_EQ(t.getAttachmentTimestampUpperBound(), 1);
}

TEST(Transaction, ValueGetterAndSetter) {
  IOTA::Models::Transaction t;
  EXPECT_EQ(t.getValue(), 0);

  t.setValue(1);
  EXPECT_EQ(t.getValue(), 1);
}

TEST(Transaction, TagGetterAndSetter) {
  IOTA::Models::Transaction t;
  EXPECT_EQ(t.getTag(), "");

  t.setTag("tag");
  EXPECT_EQ(t.getTag(), "tag");
}

TEST(Transaction, ObsoleteTagGetterAndSetter) {
  IOTA::Models::Transaction t;
  EXPECT_EQ(t.getObsoleteTag(), "");

  t.setObsoleteTag("tag");
  EXPECT_EQ(t.getObsoleteTag(), "tag");
}

TEST(Transaction, AddressGetterAndSetter) {
  IOTA::Models::Transaction t;
  EXPECT_EQ(t.getAddress(), "");

  t.setAddress("addr");
  EXPECT_EQ(t.getAddress(), "addr");
}

TEST(Transaction, SignatureFragmentsGetterAndSetter) {
  IOTA::Models::Transaction t;
  EXPECT_EQ(t.getSignatureFragments(), "");

  t.setSignatureFragments("frag");
  EXPECT_EQ(t.getSignatureFragments(), "frag");
}

TEST(Transaction, CurrentIndexGetterAndSetter) {
  IOTA::Models::Transaction t;
  EXPECT_EQ(t.getCurrentIndex(), 0);

  t.setCurrentIndex(1);
  EXPECT_EQ(t.getCurrentIndex(), 1);
}

TEST(Transaction, LastIndexGetterAndSetter) {
  IOTA::Models::Transaction t;
  EXPECT_EQ(t.getLastIndex(), 0);

  t.setLastIndex(1);
  EXPECT_EQ(t.getLastIndex(), 1);
}

TEST(Transaction, NonceGetterAndSetter) {
  IOTA::Models::Transaction t;
  EXPECT_EQ(t.getNonce(), "");

  t.setNonce("nonce");
  EXPECT_EQ(t.getNonce(), "nonce");
}

TEST(Transaction, HashGetterAndSetter) {
  IOTA::Models::Transaction t;
  EXPECT_EQ(t.getHash(), "");

  t.setHash("hash");
  EXPECT_EQ(t.getHash(), "hash");
}

TEST(Transaction, PersistenceGetterAndSetter) {
  IOTA::Models::Transaction t;
  EXPECT_EQ(t.getPersistence(), false);

  t.setPersistence(true);
  EXPECT_EQ(t.getPersistence(), true);
}

TEST(Transaction, OperatorEq) {
  IOTA::Models::Transaction t1("signatureFragments1", 11, 21, "nonce1", "hash1", 31,
                               "trunkTransaction1", "branchTransaction1", "address1", 41, "bundle1",
                               "tag1", 51, 61, 71);

  IOTA::Models::Transaction t2("signatureFragments2", 22, 22, "nonce2", "hash2", 32,
                               "trunkTransaction2", "branchTransaction2", "address2", 42, "bundle2",
                               "tag2", 52, 62, 72);

  EXPECT_EQ(t1 == t2, false);

  t1.setHash("hashEQ");
  t2.setHash("hashEQ");

  EXPECT_EQ(t1 == t2, true);
}

TEST(Transaction, OperatorNEq) {
  IOTA::Models::Transaction t1("signatureFragments1", 11, 21, "nonce1", "hash1", 31,
                               "trunkTransaction1", "branchTransaction1", "address1", 41, "bundle1",
                               "tag1", 51, 61, 71);

  IOTA::Models::Transaction t2("signatureFragments2", 22, 22, "nonce2", "hash2", 32,
                               "trunkTransaction2", "branchTransaction2", "address2", 42, "bundle2",
                               "tag2", 52, 62, 72);

  EXPECT_EQ(t1 != t2, true);

  t1.setHash("hashEQ");
  t2.setHash("hashEQ");

  EXPECT_EQ(t1 != t2, false);
}

TEST(Transaction, IsTailTransaction) {
  IOTA::Models::Transaction t("signatureFragments1", 11, 21, "nonce1", "hash1", 31,
                              "trunkTransaction1", "branchTransaction1", "address1", 41, "bundle1",
                              "tag1", 51, 61, 71);

  EXPECT_EQ(t.isTailTransaction(), false);

  t.setCurrentIndex(0);
  EXPECT_EQ(t.isTailTransaction(), true);
}
